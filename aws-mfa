#!/usr/bin/env python3.6

import argparse
import os
import sys
from configparser import ConfigParser
from datetime import datetime, timezone
from pathlib import Path
from shutil import which
from subprocess import PIPE, run

import boto3
from dateutil import parser


def main(argv):
    """Main function parses arguments and calls STS"""

    aws_creds_path = f"{os.environ['HOME']}/.aws/credentials"
    aws_config_path = f"{os.environ['HOME']}/.aws/config"

    args = parse_args()
    mfa_profile = f"{args.mfa_profile}-mfa"

    config = load_aws_config(aws_config_path)
    validate_aws_profile(args, config)

    creds = ConfigParser()
    creds.read(aws_creds_path)

    # check if credentials are expired if --force-refresh is not set
    if not args.force_refresh:
        expiration = credentials_expired(creds, mfa_profile)
        if isinstance(expiration, datetime):
            local_expiration = str(utc_to_local(expiration))
            print(f"Credentials for profile {mfa_profile} do not expire until {local_expiration}, exiting without refreshing")
            sys.exit(0)

    creds = obtain_mfa_creds(args, creds, config, mfa_profile)
    write_creds(aws_creds_path, creds, args, mfa_profile)


def utc_to_local(utc_dt):
    """Convert UTC datetime to local datetime"""

    return utc_dt.replace(tzinfo=timezone.utc).astimezone(tz=None)


def credentials_expired(creds, mfa_profile):
    if mfa_profile in creds:
        if "expiration" in creds[mfa_profile]:
            expiration = parser.isoparse(creds[mfa_profile]["expiration"])
            now = datetime.utcnow()
            now = now.replace(tzinfo=timezone.utc)
            if expiration < now:
                return True
            else:
                return expiration
    return False

def get_token(args):
    """Get token from CLI or YubiKey"""

    if args.token is None and ykey_is_present(args):
        result = run(['ykman', 'oath', 'code', '--single', args.yk_oath_credential], stdout=PIPE, check=True)
        return result.stdout.decode("utf-8").rstrip()
    elif isinstance(args.token, str):
        return args.token
    else:
        raise RuntimeError("No oath credential or token code provided, exiting.")


def write_creds(aws_creds_path, creds, args, mfa_profile):
    """Write out temp AWS credentials obtained from STS"""

    # write out our newly obtained STS temp creds
    with open(aws_creds_path, 'w') as credsfile:
        creds.write(credsfile)

    # write out our STS temp creds to environment file if requested
    if args.write_env_file:
        aws_mfa_path = f"{os.environ['HOME']}/.aws-mfa"
        # make sure file exists
        Path(aws_mfa_path).touch()
        # secure it because we're putting credentials in it
        os.chmod(aws_mfa_path, 0o600)
        with open(aws_mfa_path, 'w') as envfile:
            envfile.write(f'export AWS_ACCESS_KEY_ID={creds[mfa_profile]["aws_access_key_id"]}\n')
            envfile.write(f'export AWS_SECRET_ACCESS_KEY={creds[mfa_profile]["aws_secret_access_key"]}\n')
            envfile.write(f'export AWS_SESSION_TOKEN={creds[mfa_profile]["aws_session_token"]}\n')


def load_aws_config(aws_config_path):
    """Loads the AWS configuration from specified file"""

    config = ConfigParser()
    config.read(aws_config_path)

    return config


def obtain_mfa_creds(args, creds, config, mfa_profile):
    """Call AWS STS to obtain temporary MFA credentials"""

    # use STS to obtain temp creds
    session = boto3.Session(profile_name=args.mfa_profile)
    client = session.client('sts')
    response = client.get_session_token(
        SerialNumber=config[f"profile {args.mfa_profile}"]['mfa_serial'],
        TokenCode=get_token(args),
        DurationSeconds=args.duration
    )

    local_expiration = utc_to_local(response['Credentials']['Expiration'])
    print(f"Refreshed credentials for profile {mfa_profile}, they will expire at {local_expiration}")

    # append STS temp creds to creds dict
    creds[mfa_profile] = {}
    creds[mfa_profile]["aws_access_key_id"] = response["Credentials"]["AccessKeyId"]
    creds[mfa_profile]["aws_secret_access_key"] = response["Credentials"]["SecretAccessKey"]
    creds[mfa_profile]["aws_session_token"] = response["Credentials"]["SessionToken"]
    creds[mfa_profile]["expiration"] = response["Credentials"]["Expiration"].isoformat()

    return creds


def validate_aws_profile(args, config):
    """Validate the AWS profile provided"""

    # confirm we have a valid configuration section
    if f"profile {args.mfa_profile}" not in config.sections():
        raise ValueError(f"AWS profile {args.mfa_profile} not found in ~/.aws/config")

    # confirm the specified AWS contains an mfa_serial parameter
    if "mfa_serial" not in config[f"profile {args.mfa_profile}"]:
        raise ValueError(f"AWS profile {args.mfa_profile} does not contain an mfa_serial parameter")


def ykey_is_present(args):
    """Check if a YubiKey is present"""

    if ykman_is_installed():
        # find any attached YubiKeys
        result = run(['ykman', 'list'], stdout=PIPE, check=True)
        ykey_count = len(result.stdout.decode("utf-8").split("\n")) -1

        if ykey_count > 1:
            raise RuntimeError("Multiple YubiKey's detected, exiting")
        elif ykey_count < 1:
            raise RuntimeError("No YubiKey detected, exiting")
    elif not ykman_is_installed() and args.yk_oath_credential is not None:
        raise RuntimeError("Missing required ykman command, existing")
    else:
        return False

    return True


def ykman_is_installed():
    """Check if ykman utility is installed"""

    return which("ykman") is not None


def parse_args():
    """Parse arguments"""

    description = "Obtain and make available temporary AWS credentials"
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument(
        "--mfa-profile",
        type=str,
        default=os.environ["AWS_MFA_PROFILE"],
        help="Named AWS profile containg the mfa_serial for use in obtaining temporary credentials."
    )

    token_help = "Six digit token code from your MFA device"
    parser.add_argument("--token", type=str, help=token_help)

    oath_help = "For use with a YubiKey. YubiKey Manager OATH credential to use (see 'ykman oath list' output)"
    parser.add_argument("--yk-oath-credential", type=str, default=os.environ["AWS_MFA_YK_OATH_CREDENTIAL"], help=oath_help)

    duration_help = "STS token duration in seconds to request, defaults to 12 hours"
    parser.add_argument("--duration", type=int, default="43200" if "AWS_MFA_DURATION" not in os.environ else os.environ["AWS_MFA_DURATION"], help=duration_help)

    env_help = "Write temp MFA AWS credentials to ~/.aws-mfa"
    parser.add_argument("--write-env-file", action="store_true", help=env_help)

    refresh_help = "Force a refresh even if the existing credentials are not yet expired"
    parser.add_argument("--force-refresh", action="store_true", help=refresh_help)

    return parser.parse_args()


if __name__ == "__main__":
    main(sys.argv)
